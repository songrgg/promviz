apiVersion: shipper.booking.com/v1
kind: Application
metadata:
  name: traffic
  labels:
    service-directory.project: payhub
    service-directory.service: traffic
spec:
  revisionHistoryLimit: 10
  template:
    clusterRequirements:
      regions:
      - name: eu-nl
        # 'replicas' determines how many clusters your application should be
        # scheduled on in this region.
        replicas: 1
      - name: eu-uk
        replicas: 1
      # you can specify any particular cluster capabilities your application
      # needs, like DLB (the Booking load balancer) or iSCSi network-attached storage
      capabilities:
      - dlb
    chart:
      name: java
      version: ^5
      repoUrl: https://jfrog.booking.com/artifactory/charts/
    # The values listed below are a subset of all the available values. You can find the full list of
    # values for java shipper applications in the values.yaml of the java chart in the core-charts repository
    # https://gitlab.booking.com/bplatform/core-charts/blob/master/official/java/values.yaml
    # - These values include things like the resource limits, service configuration, etc
    values:
      name: traffic
      meta:
        annotations:
          litmuschaos.io/chaos: "true"
      replicaCount: 1
      imagePullPolicy: Always
      service:
        hostname: payhub-api.dqs.booking.com
      readinessProbe:
        httpGet:
          port: 8080
      dependencies:
        service-directory:
          api: {}
        cluster-directory:
          api: {}
        its-hr-tools:
          staff-api: {}
      env:
      - name: SERVER_ROLE
        value: b-payhub-api
      image:
        repository: docker.jfrog.booking.com/projects/payhub/traffic
        # because DQS is like production (but for people developing against
        # your service), it should have similar levels of care as prod. as
        # such, we suggest building your docker images from a CI pipeline
        # rather than by hand. the CI pipeline might use 'sed' to swap
        # CI_COMMIT_SHA for the image produced by the pipeline.
        tag: CI_COMMIT_SHA
      resources:
        limits:
          ## resources.limits.cpu is the maximum number of cpu cores a single app container is allowed to use
          cpu: 1500m
          ## resources.limits.memory is the maximum amount of memory a single app container is allowed to use
          memory: 50Mi

        requests:
          ## resource.requests.cpu is the number of cpu cores to exclusively reserve for a single app container
          cpu: 250m
          ## resource.requests.memory is the amount of memory to exclusively reserve for a single app container
          memory: 50Mi
      lifecycle:
        preStop:
          exec:
            command:
              - /bin/sh
              - -c
              - sleep 10;
      sidecars:
        preStopGracefulShutdown:
          enabled: true
        nginx:
          enabled: true
          appPort: 8080
        sysctlv2:
          enabled: true
          dependencies:
          - "Bookings::SysCtl::XML_Feature"
          - "Bookings::SysCtl::SiteVars"
          - "Bookings::SysCtl::AccessCtl::PenTestIPs"
    strategy:
      # DQS is a production-like environment, so we need a real rollout strategy just like prod
      steps:
        # this 'staging' step represents a release with 1 pod of capacity, but no production traffic
      - name: staging
        capacity:
          # these values are percentages of the final capacity (# of pods) for
          # that Release in other words, if my deployment has 10 pods, this is
          # 100% (or 1%) of 10 pods. Always rounded up to the nearest whole
          # pod.
          incumbent: 100
          contender: 1
        traffic:
          incumbent: 100
          contender: 0
      - name: vanguard
        capacity:
          incumbent: 90
          contender: 10
        traffic:
          # these traffic values are weights, not percentages: they could just as well be '9' and '1' or '900' and '100'.
          incumbent: 90
          contender: 10
      - name: full on
        capacity:
          incumbent: 0
          contender: 100
        traffic:
          incumbent: 0
          contender: 100
